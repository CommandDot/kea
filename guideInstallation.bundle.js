webpackJsonp([11],{496:function(e,t,a){"use strict";function n(){return r.a.createElement("div",{className:"counter-singleton-scene"},r.a.createElement("div",{className:"description"},r.a.createElement("h2",null,"Installation"),r.a.createElement("p",null,"Installing ",r.a.createElement("code",null,"kea")," is rather straightforward. You need to add the ",r.a.createElement("code",null,"kea")," package, reset kea's context and wrap your app with react-redux's ",r.a.createElement("code",null,"<Provider />")," tag."),r.a.createElement("h3",null,"1. Install the packages"),r.a.createElement(o.default,{className:"bash"},c.package),r.a.createElement("h3",null,"2. Set up Kea's context"),r.a.createElement("p",null,"Kea stores all of its data on a ",r.a.createElement("u",null,"context"),", which must be set up before any ",r.a.createElement("code",null,"logic")," can be used. This context stores a reference to the redux store, initializes all plugins, caches all built logic and keeps track of what is mounted and what is not."),r.a.createElement("p",null,"To set it up, just call ",r.a.createElement("code",null,"resetContext(options)")," before rendering your app."),r.a.createElement("p",null,"Then also wrap your ",r.a.createElement("code",null,"<App />")," with Redux's ",r.a.createElement("code",null,"<Provider />"),", getting the ",r.a.createElement("code",null,"store")," from ",r.a.createElement("code",null,"getContext()"),"."),r.a.createElement("p",null,"This is how your ",r.a.createElement("code",null,"index.js")," would look like if you used ",r.a.createElement("code",null,"create-react-app"),":"),r.a.createElement(o.default,{className:"javascript"},c.provider),r.a.createElement("p",null,"And you're done! Feel free to use ",r.a.createElement("code",null,"kea()")," calls anywhere in your code!"),r.a.createElement("h4",null,"A note about call order"),r.a.createElement("p",null,"In versions of Kea before 1.0, you had to run the setup code before any call to ",r.a.createElement("code",null,"kea({})")," was made. This is no longer the case. Each call to ",r.a.createElement("code",null,"kea({})")," lazily loads the logic and builds it only when requested, either when mounted onto a React component or instructed to do so manually (via ",r.a.createElement("code",null,"logic.build()")," and/or ",r.a.createElement("code",null,"logic.mount()"),")."),r.a.createElement("p",null,"Calling ",r.a.createElement("code",null,"resetContext()")," always clears all initialised logic and reverts your app to a clean state.")))}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n;var l=a(10),r=a.n(l),o=(a(133),a(200)),c={package:a(571),provider:a(572)}},571:function(e,t){e.exports="# if you're using yarn\nyarn add kea redux react-redux reselect\n\n# if you're using npm\nnpm install kea redux react-redux reselect --save\n"},572:function(e,t){e.exports="import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { resetContext, getContext } from 'kea'; // <-- add this\nimport { Provider } from 'react-redux'; // <---------- add this\nimport './index.css';\nimport App from './App';\n\nresetContext({ // <----------------------------------- add this\n  createStore: {\n    // additional options (e.g. middleware, reducers, ...)\n  },\n  plugins: [\n    // additional kea plugins\n  ]\n})\n\nReactDOM.render( // <-------------------------- and update this\n  <Provider store={getContext().store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"}});