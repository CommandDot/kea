webpackJsonp([0],{177:function(n,e,t){"use strict";throw Object.defineProperty(e,"__esModule",{value:!0}),new Error('Cannot find module "kea/scene"')},178:function(n,e,t){"use strict";throw Object.defineProperty(e,"__esModule",{value:!0}),new Error('Cannot find module "kea/scene"')},179:function(n,e,t){"use strict";throw Object.defineProperty(e,"__esModule",{value:!0}),new Error('Cannot find module "kea/scene"')},180:function(n,e,t){"use strict";throw Object.defineProperty(e,"__esModule",{value:!0}),new Error('Cannot find module "kea/scene"')},181:function(n,e,t){"use strict";throw Object.defineProperty(e,"__esModule",{value:!0}),new Error('Cannot find module "kea/scene"')},182:function(n,e,t){"use strict";throw Object.defineProperty(e,"__esModule",{value:!0}),new Error('Cannot find module "kea/scene"')},290:function(n,e,t){"use strict";var o=t(1);t.n(o);throw new Error('Cannot find module "kea"')},291:function(n,e,t){"use strict";throw Object.defineProperty(e,"__esModule",{value:!0}),new Error('Cannot find module "kea/scene"')},292:function(n,e,t){"use strict";var o=t(14);t.n(o);throw new Error('Cannot find module "kea"')},293:function(n,e,t){"use strict";var o=t(14);t.n(o);throw new Error('Cannot find module "kea"')},294:function(n,e,t){"use strict";var o=t(1),r=(t.n(o),t(14));t.n(r);throw new Error('Cannot find module "kea"')},295:function(n,e,t){"use strict";var o=t(918),r=(t.n(o),t(1));t.n(r);throw new Error('Cannot find module "kea"')},297:function(n,e,t){"use strict";var o=t(919),r=(t.n(o),t(1)),s=(t.n(r),t(14));t.n(s);throw new Error('Cannot find module "kea"')},298:function(n,e,t){"use strict";var o=t(920),r=(t.n(o),t(1));t.n(r);throw new Error('Cannot find module "kea"')},299:function(n,e,t){"use strict";var o=t(922),r=(t.n(o),t(1));t.n(r);throw new Error('Cannot find module "kea"')},300:function(n,e,t){"use strict";var o=t(1),r=(t.n(o),t(14));t.n(r);throw new Error('Cannot find module "kea"')},301:function(n,e,t){"use strict";var o=t(1),r=(t.n(o),t(14));t.n(r);throw new Error('Cannot find module "kea"')},302:function(n,e,t){"use strict";var o=t(1);t.n(o);throw new Error('Cannot find module "kea"')},303:function(n,e,t){"use strict";var o=t(1),r=(t.n(o),t(31));t.n(r);throw new Error('Cannot find module "kea"')},304:function(n,e,t){"use strict";var o=t(923),r=(t.n(o),t(1));t.n(r);throw new Error('Cannot find module "kea"')},305:function(n,e,t){"use strict";var o=t(169),r=(t.n(o),t(1)),s=(t.n(r),t(14));t.n(s);throw new Error('Cannot find module "kea"')},306:function(n,e,t){"use strict";var o=t(169),r=(t.n(o),t(1)),s=(t.n(r),t(14));t.n(s);throw new Error('Cannot find module "kea"')},515:function(n,e,t){e=n.exports=t(21)(),e.push([n.i,"",""])},516:function(n,e,t){e=n.exports=t(21)(),e.push([n.i,"",""])},517:function(n,e,t){e=n.exports=t(21)(),e.push([n.i,".counter-dynamic-scene {\n  // text-align: center;\n}\n",""])},519:function(n,e,t){e=n.exports=t(21)(),e.push([n.i,".counter-singleton-scene {\n  // text-align: center;\n}\n",""])},521:function(n,e,t){e=n.exports=t(21)(),e.push([n.i,".sliders-scene {\n  text-align: center;\n}\n.sliders-scene .slider-container {\n  max-width: 500px;\n  margin: 0 auto;\n}\n",""])},64:function(n,e,t){"use strict";var o=t(14);t.n(o);throw new Error('Cannot find module "kea"')},756:function(n,e){n.exports="// index.js\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { kea } from 'kea'\n\n@kea({\n  actions: () => ({\n    toggleFeature: (feature) => ({ feature })\n  }),\n  reducers: ({ actions }) => ({\n    features: [{}, PropTypes.object, {\n      [actions.toggleFeature]: (state, payload) => {\n        const { feature } = payload\n        return {\n          ...state,\n          [feature]: !state[feature]\n        }\n      }\n    }]\n  })\n})\nexport default class CounterExampleScene extends Component {\n  // ...\n\n  render () {\n    const { features } = this.props\n    const { toggleFeature } = this.actions\n\n    return (\n      <div>\n        <button onClick={() => toggleFeature('reducerDetails')}>{'Tell me more!'}</button>\n\n        {features.reducerDetails ? (\n          <div className='extra-help'>\n            extra help comes here\n          </div>\n        ) : null}\n      </div>\n    )\n  }\n}\n"},757:function(n,e){n.exports="// features-logic.js\nimport PropTypes from 'prop-types'\nimport { kea } from 'kea'\n\nexport default kea({\n  actions: () => ({\n    toggleFeature: (feature) => ({ feature })\n  }),\n  reducers: ({ actions }) => ({\n    features: [{}, PropTypes.object, {\n      [actions.toggleFeature]: (state, payload) => {\n        const { feature } = payload\n        return {\n          ...state,\n          [feature]: !state[feature]\n        }\n      }\n    }]\n  })\n})\n"},758:function(n,e){n.exports="// index.js\nimport React, { Component } from 'react'\n\nimport featuresLogic from '../features-logic'\n\n@featuresLogic\nexport default class CounterExampleScene extends Component {\n  // no change here\n}\n"},759:function(n,e){n.exports="import React, { Component } from 'react'\nimport { connect } from 'kea'\n\nimport featuresLogic from '../features-logic'\nimport someOtherLogic from '../some-other-logic'\n\n@connect({\n  actions: [\n    featuresLogic, [\n      'toggleFeature'\n    ]\n  ],\n  props: [\n    featuresLogic, [\n      'features'\n    ],\n    someOtherLogic, [\n      'isMenuOpen',\n      'isPageLoading',\n      'highlightTheme'\n    ]\n  ]\n})\nexport default class CounterExampleScene extends Component {\n  // as we were...\n  render () {\n    const { features, isMenuOpen, isPageLoading, highlightTheme } = this.props\n    const { toggleFeature } = this.actions\n    // ...\n  }\n}\n"},760:function(n,e){n.exports="import React, { Component } from 'react'\nimport { connect } from 'kea'\n\nimport featuresLogic from '../features-logic'\n\n@kea({\n  connect: {\n    actions: [\n      featuresLogic, [\n        'toggleFeature'\n      ]\n    ],\n    props: [\n      featuresLogic, [\n        'features'\n      ]\n    ]\n  },\n  actions: {\n    doSomething: (id) => ({ id })\n  },\n  // ...\n})\nexport default class CounterExampleScene extends Component {\n  // no change here\n}\n"},762:function(n,e){n.exports="// counter/index.js\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { kea } from 'kea'\n\n@kea({\n  key: (props) => props.id,\n  path: (key) => ['scenes', 'counterDynamic', 'counter', key],\n\n  actions: () => ({\n    increment: (amount) => ({ amount }),\n    decrement: (amount) => ({ amount })\n  }),\n\n  reducers: ({ actions, key, props }) => ({\n    counter: [0, PropTypes.number, {\n      [actions.increment]: (state, payload) => payload.key === key ? state + payload.amount : state,\n      [actions.decrement]: (state, payload) => payload.key === key ? state - payload.amount : state\n    }]\n  }),\n\n  selectors: ({ selectors }) => ({\n    doubleCounter: [\n      () => [selectors.counter],\n      (counter) => counter * 2,\n      PropTypes.number\n    ]\n  })\n})\nexport default class Counter extends Component {\n  render () {\n    const { counter, doubleCounter } = this.props\n    const { increment, decrement } = this.actions\n\n    return (\n      <div className='kea-counter'>\n        Count: {counter}\n        <br />\n        Doublecount: {doubleCounter}\n        <br />\n        <button onClick={() => increment(1)}>Increment</button>\n        <button onClick={() => decrement(1)}>Decrement</button>\n      </div>\n    )\n  }\n}\n\n// index.js\nexport default class CounterDynamicScene extends Component {\n  render () {\n    return (\n      <div>\n        <Counter id={1} />\n        <Counter id={2} />\n      </div>\n    )\n  }\n}\n"},763:function(n,e){n.exports="import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { kea } from 'kea'\n\n@kea({\n  key: (props) => props.id,\n\n  path: (key) => ['scenes', 'counterDynamic', 'counter', key],\n\n  // ...\n})\nexport default class Counter extends Component {\n  // ...\n}\n"},764:function(n,e){n.exports="@kea({\n  key: (props) => props.id,\n  path: (key) => ['scenes', 'counterDynamic', 'counter', key],\n\n  actions: () => ({\n    increment: (amount = 1) => ({ amount }),\n    decrement: (amount = 1) => ({ amount })\n  }),\n\n  reducers: ({ actions, key, props }) => ({\n    counter: [0, PropTypes.number, {\n      [actions.increment]: (state, payload) => payload.key === key ? state + payload.amount : state,\n      [actions.decrement]: (state, payload) => payload.key === key ? state - payload.amount : state\n    }]\n  }),\n\n  // selectors: ...\n})\n"},765:function(n,e){n.exports="function increment (amount) {\n  return { amount: amount }\n}\n"},766:function(n,e){n.exports="store.dispatch({\n  type: 'increment counter', // autogenerated unique type\n  payload: {\n    amount: 1\n  }\n})\n"},767:function(n,e){n.exports="const { increment, decrement } = this.actions\n"},768:function(n,e){n.exports="// counter/index.js\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { kea } from 'kea'\n\n@kea({\n  actions: () => ({\n    increment: (amount) => ({ amount }),\n    decrement: (amount) => ({ amount })\n  }),\n  // TODO: add things here\n})\nexport default class Counter extends Component {\n  render () {\n    const { increment, decrement } = this.actions\n\n    // TODO: make these work\n    const counter = 0\n    const counter = 0\n\n    return (\n      <div className='kea-counter'>\n        Count: {counter}\n        <br />\n        Doublecount: {doubleCounter}\n        <br />\n        <button onClick={() => increment(1)}>Increment</button>\n        <button onClick={() => decrement(1)}>Decrement</button>\n      </div>\n    )\n  }\n}\n"},769:function(n,e){n.exports="import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { kea } from 'kea'\n\n@kea({\n  // TODO: code goes here\n})\nexport default class Counter extends Component {\n  render () {\n    // TODO: make these work\n    const counter = 0\n    const doubleCounter = 0\n    const increment = () => {}\n    const decrement = () => {}\n\n    return (\n      <div className='kea-counter'>\n        Count: {counter}\n        <br />\n        Doublecount: {doubleCounter}\n        <br />\n        <button onClick={() => increment(1)}>Increment</button>\n        <button onClick={() => decrement(1)}>Decrement</button>\n      </div>\n    )\n  }\n}\n"},770:function(n,e){n.exports="// counter/index.js\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { kea } from 'kea'\n\n@kea({\n  actions: () => ({\n    increment: (amount) => ({ amount }),\n    decrement: (amount) => ({ amount })\n  }),\n\n  reducers: ({ actions }) => ({\n    counter: [0, PropTypes.number, {\n      [actions.increment]: (state, payload) => state + payload.amount,\n      [actions.decrement]: (state, payload) => state - payload.amount\n    }]\n  }),\n\n  selectors: ({ selectors }) => ({\n    doubleCounter: [\n      () => [selectors.counter],\n      (counter) => counter * 2,\n      PropTypes.number\n    ]\n  })\n})\nexport default class Counter extends Component {\n  render () {\n    const { counter, doubleCounter } = this.props\n    const { increment, decrement } = this.actions\n\n    return (\n      <div className='kea-counter'>\n        Count: {counter}\n        <br />\n        Doublecount: {doubleCounter}\n        <br />\n        <button onClick={() => increment(1)}>Increment</button>\n        <button onClick={() => decrement(1)}>Decrement</button>\n      </div>\n    )\n  }\n}\n\n// index.js\nexport default class CounterSingletonScene extends Component {\n  render () {\n    return (\n      <div>\n        <Counter />\n        <Counter />\n      </div>\n    )\n  }\n}\n"},771:function(n,e){n.exports="import { kea } from 'kea'\n"},772:function(n,e){n.exports="import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { kea } from 'kea'\n\nconst keaOptions = {\n  // ... code here\n}\n\nclass Counter extends Component {\n  render () {\n    // TODO: make these work\n    const counter = 0\n    const doubleCounter = 0\n    const increment = () => {}\n    const decrement = () => {}\n\n    return (\n      <div className='kea-counter'>\n        Count: {counter}\n        <br />\n        Doublecount: {doubleCounter}\n        <br />\n        <button onClick={() => increment(1)}>Increment</button>\n        <button onClick={() => decrement(1)}>Decrement</button>\n      </div>\n    )\n  }\n}\n\nexport default kea(keaOptions)(Component)\n"},773:function(n,e){n.exports="import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { kea } from 'kea'\n\n@kea({\n  actions: () => ({\n    increment: (amount) => ({ amount }),\n    decrement: (amount) => ({ amount })\n  }),\n\n  reducers: ({ actions }) => ({\n    counter: [0, PropTypes.number, {\n      [actions.increment]: (state, payload) => state + payload.amount,\n      [actions.decrement]: (state, payload) => state - payload.amount\n    }]\n  }),\n\n  // TODO: more code here?\n})\nexport default class Counter extends Component {\n  render () {\n    const { counter } = this.props\n    const { increment, decrement } = this.actions\n\n    // TODO: is there a better way? we need to recompute this every time we render!\n    const doubleCounter = counter * 2\n\n    return (\n      <div className='kea-counter'>\n        Count: {counter}\n        <br />\n        Doublecount: {doubleCounter}\n        <br />\n        <button onClick={() => increment(1)}>Increment</button>\n        <button onClick={() => decrement(1)}>Decrement</button>\n      </div>\n    )\n  }\n}\n"},774:function(n,e){n.exports="selectors: ({ selectors }) => ({\n  // add as many as you want\n  nameOfSelector: [\n    // input selectors\n    () => [selectors.firstOtherSelector, selectors.secondOtherSelector],\n    // calculate the result\n    (firstOther, secondOther) => firstOther + secondOther,\n    // type of the result\n    PropTypes.number\n  ]\n})\n"},775:function(n,e){n.exports="\nactions: ({ constants }) => ({\n  // tab\n  showAll: true,\n  showActive: true,\n  showCompleted: true,\n\n  // todos\n  addTodo: value => ({ value }),\n  removeTodo: id => ({ id }),\n  completeTodo: id => ({ id }),\n  unCompleteTodo: id => ({ id }),\n  renameTodo: (id, value) => ({ id, value }),\n  setEditing: id => ({ id }),\n  updateEditValue: (id, value) => ({ id, value }),\n  clearEditing: id => ({ id }),\n  toggleAll: completed => ({ completed }),\n  clearCompleted: true\n}),\n\nreducers: ({ actions, constants }) => ({\n  visibilityFilter: [constants.SHOW_ALL, PropTypes.string, {\n    [actions.showAll]: () => constants.SHOW_ALL,\n    [actions.showActive]: () => constants.SHOW_ACTIVE,\n    [actions.showCompleted]: () => constants.SHOW_COMPLETED\n  }],\n\n  todos: [{}, PropTypes.object, { persist: true }, {\n    [actions.addTodo]: (state, payload) => {\n      const { value } = payload\n      const id = createUuid()\n\n      return {\n        ...state,\n        [id]: {\n          id,\n          createdAt: new Date().getTime(),\n          value,\n          completed: false,\n          editing: false\n        }\n      }\n    },\n    [actions.removeTodo]: (state, payload) => {\n      const { id } = payload\n      const { [id]: _dispose_, ...rest } = state\n      return rest\n    },\n    [actions.completeTodo]: (state, payload) => {\n      const { id } = payload\n\n      return {\n        ...state,\n        [id]: {\n          ...state[id],\n          completed: true\n        }\n      }\n    },\n    [actions.unCompleteTodo]: (state, payload) => {\n      const { id } = payload\n\n      return {\n        ...state,\n        [id]: {\n          ...state[id],\n          completed: false\n        }\n      }\n    },\n    [actions.renameTodo]: (state, payload) => {\n      const { id, value } = payload\n\n      return {\n        ...state,\n        [id]: {\n          ...state[id],\n          value\n        }\n      }\n    },\n    [actions.toggleAll]: (state, payload) => {\n      const { completed } = payload\n      let newState = {}\n      Object.values(state).forEach(todo => {\n        newState[todo.id] = {...todo, completed}\n      })\n\n      return newState\n    },\n    [actions.clearCompleted]: (state, payload) => {\n      let newState = {}\n      Object.values(state).forEach(todo => {\n        if (!todo.completed) {\n          newState[todo.id] = todo\n        }\n      })\n      return newState\n    },\n    [actions.setEditing]: (state, payload) => {\n      const { id } = payload\n\n      return {\n        ...state,\n        [id]: {\n          ...state[id],\n          editing: true,\n          editValue: state[id].value\n        }\n      }\n    },\n    [actions.updateEditValue]: (state, payload) => {\n      const { id, value } = payload\n\n      return {\n        ...state,\n        [id]: {\n          ...state[id],\n          editValue: value\n        }\n      }\n    },\n    [actions.clearEditing]: (state, payload) => {\n      const { id } = payload\n\n      return {\n        ...state,\n        [id]: {\n          ...state[id],\n          editing: false,\n          editValue: null\n        }\n      }\n    }\n  }]\n}),\n\n"},776:function(n,e){n.exports="import { delay } from 'redux-saga'\n\nconst API_URL = 'https://api.github.com'\n\n@kea({\n  // ...\n\n  workers: {\n    * fetchRepositories (action) {\n      const { username } = action.payload\n\n      yield delay(100) // debounce for 100ms\n\n      const url = `${API_URL}/users/${username}/repos?per_page=250`\n      const response = yield window.fetch(url)\n\n      if (response.status === 200) {\n        const json = yield response.json()\n        // we have the repositories in `json`\n        // what to do with them?\n      } else {\n        const json = yield response.json()\n        // there's an error in `json.message`\n        // what to do with it?\n      }\n    }\n  }\n})\n"},777:function(n,e){n.exports="import { put } from 'redux-saga/effects' // new\n\n@kea({\n  workers: {\n    * fetchRepositories (action) {\n      const { setRepositories, setFetchError } = this.actions // new\n      const { username } = action.payload\n\n      yield delay(100)\n\n      const url = `${API_URL}/users/${username}/repos?per_page=250`\n      const response = yield window.fetch(url)\n\n      if (response.status === 200) {\n        const json = yield response.json()\n        yield put(setRepositories(json)) // new\n      } else {\n        const json = yield response.json()\n        yield put(setFetchError(json.message)) // new\n      }\n    }\n  }\n})\n"},778:function(n,e){n.exports="import { call } from 'redux-saga/effects'\n\n@kea({\n  start: function * () {\n    const username = yield this.get('username')\n    yield call(this.workers.fetchRepositories, { payload: { username } })\n  }\n})\n"},779:function(n,e){n.exports="import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { kea } from 'kea'\n\n@kea({\n  actions: () => ({\n    setUsername: (username) => ({ username })\n  }),\n\n  reducers: ({ actions }) => ({\n    username: ['keajs', PropTypes.string, {\n      [actions.setUsername]: (_, payload) => payload.username\n    }]\n  })\n})\nexport default class ExampleGithubScene extends Component {\n  render () {\n    const { username } = this.props\n    const { setUsername } = this.actions\n\n    return (\n      <div className='example-github-scene'>\n        <div style={{marginBottom: 20}}>\n          <h1>Search for a github user</h1>\n          <input value={username}\n                 type='text'\n                 onChange={e => setUsername(e.target.value)} />\n        </div>\n        <div>\n          Repos will come here...\n        </div>\n      </div>\n    )\n  }\n}\n"},780:function(n,e){n.exports="@kea({\n  start: function * () {\n    const { setUsername } = this.actions\n    const username = yield this.get('username')\n    yield put(setUsername(username))\n  }\n})\n"},781:function(n,e){n.exports="@kea({\n  actions: () => ({\n    setUsername: (username) => ({ username }),\n    setRepositories: (repositories) => ({ repositories }),\n    setFetchError: (message) => ({ message })\n  }),\n\n  reducers: ({ actions }) => ({\n    username: ['keajs', PropTypes.string, {\n      [actions.setUsername]: (_, payload) => payload.username\n    }],\n    repositories: [[], PropTypes.array, {\n      [actions.setUsername]: () => [],\n      [actions.setRepositories]: (_, payload) => payload.repositories\n    }],\n    isLoading: [false, PropTypes.bool, {\n      [actions.setUsername]: () => true,\n      [actions.setRepositories]: () => false,\n      [actions.setFetchError]: () => false\n    }],\n    error: [null, PropTypes.string, {\n      [actions.setUsername]: () => null,\n      [actions.setFetchError]: (_, payload) => payload.message\n    }]\n  })\n})\n"},782:function(n,e){n.exports="@kea({\n  selectors: ({ selectors }) => ({\n    sortedRepositories: [\n      () => [selectors.repositories],\n      (repositories) => {\n        return repositories.sort((a, b) => b.stargazers_count - a.stargazers_count)\n      },\n      PropTypes.array\n    ]\n  })\n})\n"},783:function(n,e){n.exports="@kea({\n  actions: ...,\n  reducers: ...,\n\n  takeLatest: ({ actions, workers }) => ({\n    [actions.setUsername]: workers.fetchRepositories\n  }),\n\n  workers: {\n    * fetchRepositories (action) {\n      const { username } = action.payload\n\n      console.log(`setUsername called with ${username}`)\n    }\n  }\n})\n"},784:function(n,e){n.exports="export default class ExampleGithubScene extends Component {\n  render () {\n    const { username, isLoading, repositories, error } = this.props\n    const { setUsername } = this.actions\n\n    return (\n      <div className='example-github-scene'>\n        <div style={{marginBottom: 20}}>\n          <h1>Search for a github user</h1>\n          <input value={username}\n                 type='text'\n                 onChange={e => setUsername(e.target.value)} />\n        </div>\n        {isLoading ? (\n          <div>\n            Loading...\n          </div>\n        ) : repositories.length > 0 ? (\n          <div>\n            Found {repositories.length} repositories for user {username}!\n            {repositories.map(repo => (\n              <div key={repo.id}>\n                <a href={repo.html_url} target='_blank'>{repo.full_name}</a>\n                {' - '}\n                {repo.stargazers_count} stars, {repo.forks} forks.\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div>\n            {error ? `Error: ${error}` : 'No repositories found'}\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n"},785:function(n,e){n.exports="npm install -g kea\nkea new my-project\ncd my-project\nyarn       # ... or npm install\nyarn start # ... or npm start\n"},786:function(n,e){n.exports="yarn add custom-react-scripts\nyarn remove react-scripts\n"},787:function(n,e){n.exports="REACT_APP_DECORATORS=true\n"},788:function(n,e){n.exports="import \"regenerator-runtime/runtime\"; // add this\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux' // add this\nimport './index.css';\nimport store from './store'; // add this (before import App !!!)\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( // update this\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nregisterServiceWorker();\n"},789:function(n,e){n.exports="create-react-app my-app\ncd my-app\nyarn start\n"},790:function(n,e){n.exports="yarn add kea redux react-redux redux-saga reselect\n"},791:function(n,e){n.exports="import { createStore, applyMiddleware, combineReducers, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport { keaSaga, keaReducer } from 'kea'\n\nconst reducers = combineReducers({\n  scenes: keaReducer('scenes')\n  // other app reducers here\n})\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst finalCreateStore = compose(\n  applyMiddleware(sagaMiddleware),\n  // more middlewares here\n)(createStore)\n\nconst store = finalCreateStore(reducers)\n\nsagaMiddleware.run(keaSaga)\n\nexport default store\n"},792:function(n,e){n.exports="# if you're using yarn\nyarn add kea\nyarn add reselect redux-saga     # you will need these if not already installed\nyarn add react redux react-redux # you probably have these\n\n# if you're using npm\nnpm install kea --save\nnpm install reselect redux-saga --save     # you will need these if not already installed\nnpm install react redux react-redux --save # you probably have these\n"},793:function(n,e){n.exports="import { keaReducer, keaSaga } from 'kea' // add this\n\nconst reducers = combineReducers({\n  scenes: keaReducer('scenes'), // add this\n  routing: routerReducer\n  // ... other reducers you might have\n})\n\nconst sagaMiddleware = createSagaMiddleware()\nconst finalCreateStore = compose(\n  applyMiddleware(sagaMiddleware),\n  applyMiddleware(routerMiddleware(browserHistory))\n)(createStore)\n\nconst store = finalCreateStore(reducers)\n\nsagaMiddleware.run(keaSaga) // add this\n"},794:function(n,e){n.exports="import { take, race, put } from 'redux-saga/effects'\nimport delay from '~/utils/delay'\n"},795:function(n,e){n.exports="@kea({\n  actions: () => ({\n    updateSlide: index => ({ index })\n  }),\n\n  // ...\n\n  // run this saga when the component is mounted\n  start: function * () {\n    const { updateSlide } = this.actions\n\n    while (true) {\n      const { timeout } = yield race({\n        change: take(updateSlide.toString()),\n        timeout: delay(5000)\n      })\n\n      if (timeout) {\n        const currentSlide = yield this.get('currentSlide')\n        yield put(updateSlide(currentSlide + 1))\n      }\n    }\n  }\n})\nexport default class StaticSlider extends Component {\n  // as it was\n}\n"},796:function(n,e){n.exports="// slider/index.js\nimport './styles.scss'\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { kea } from 'kea'\n\nimport { take, race, put } from 'redux-saga/effects'\n\nimport delay from '~/utils/delay'\nimport range from '~/utils/range'\n\nimport images from './images'\n\n@kea({\n  key: (props) => props.id,\n\n  path: (key) => ['scenes', 'homepage', 'slider', key],\n\n  actions: () => ({\n    updateSlide: index => ({ index })\n  }),\n\n  reducers: ({ actions, key, props }) => ({\n    currentSlide: [props.initialSlide || 0, PropTypes.number, {\n      [actions.updateSlide]: (state, payload) => {\n        return payload.key === key ? payload.index % images.length : state\n      }\n    }]\n  }),\n\n  selectors: ({ selectors }) => ({\n    currentImage: [\n      () => [selectors.currentSlide],\n      (currentSlide) => images[currentSlide],\n      PropTypes.object\n    ]\n  }),\n\n  // This saga is run when the component is mounted.\n  // The function is a regular redux-saga worker that has access to:\n  // 1) this.actions, 2) this.key and 3) this.props\n  //\n  // Read the redux-saga documentation to understand the different\n  // functions like: race(), put(), take(), etc\n  start: function * () {\n    const { updateSlide } = this.actions\n\n    console.log('Starting homepage slider saga')\n    // console.log(this, this.actions, this.props)\n\n    while (true) {\n      // wait until the updateSlide() action is triggered or a 5sec timeout occurs\n      // to ignore actions from other slider instances we must also match the key\n      const { timeout } = yield race({\n        change: take(action => action.type === updateSlide.toString() &&\n                               action.payload.key === this.key),\n        timeout: delay(5000)\n      })\n\n      if (timeout) {\n        // use this.get(..) to select the latest data from redux\n        const currentSlide = yield this.get('currentSlide')\n\n        // actions are not automatically bound to dispatch, so\n        // you must use redux-saga's put() with them\n        yield put(updateSlide(currentSlide + 1))\n      }\n    }\n  },\n\n  // this saga is run when the component is unmounted\n  stop: function * () {\n    console.log('Stopping homepage slider saga')\n  },\n\n  // The redux-saga takeEvery function.\n  // It waits for actions and runs the relevant functions.\n  // Also available: takeLatest\n  takeEvery: ({ actions, workers }) => ({\n    [actions.updateSlide]: workers.updateSlide\n  }),\n\n  // it's recommended to group all the logic under the workers: {} object.\n  workers: {\n    updateSlide: function * (action) {\n      // check if it was this component that triggered the action\n      if (action.payload.key === this.key) {\n        console.log('slide update triggered', action.payload.key, this.key, this.props.id)\n        // console.log(action, this)\n      }\n    }\n  }\n})\nexport default class Slider extends Component {\n  render () {\n    const { currentSlide, currentImage } = this.props\n    const { updateSlide } = this.actions\n\n    const title = `Image copyright by ${currentImage.author}`\n\n    return (\n      <div className='kea-slider'>\n        <img src={currentImage.src} alt={title} title={title} />\n        <div className='buttons'>\n          {range(images.length).map(i => (\n            <span key={i}\n                  className={i === currentSlide ? 'selected' : ''}\n                  onClick={() => updateSlide(i)} />\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\n// index.js\nexport default class SlidersScene extends Component {\n  render () {\n    return (\n      <div className='slider-container'>\n        <Slider id={1} initialSlide={0} />\n        <Slider id={2} initialSlide={1} />\n      </div>\n    )\n  }\n}\n\n"},798:function(n,e){n.exports="import api from './api'\n\nfunction * doSomething () {\n  // get all visible users\n  const result = yield api.fetchUsers()\n  console.log('api returned', result)\n\n  // get the posts for the first user\n  const posts = yield api.fetchUserPosts(result.users[0].username)\n\n  // do something with the user's posts\n  console.log('got the posts', posts)\n}\n"},799:function(n,e){n.exports="import api from './api'\n\nfunction doSomething () {\n  // get all visible users\n  api.fetchUsers().then(result => {\n    console.log('api returned', result)\n\n    // get the posts for the first user\n    api.fetchUserPosts(result.users[0].username).then(posts => {\n      // do something with the user's posts\n      console.log('got the posts', posts)\n    })\n  })\n}\n"},800:function(n,e){n.exports="import api from './api'\nimport { take, race, put, fork, call } from 'redux-saga/effects'\n\n// redux action creator\nconst loadUsers = (search) => ({ type: 'LOAD_USERS', payload: { search } })\n\n// all saga effects must be run in generator functions\nfunction * saga () {\n\n  // here are some things you can do inside sagas\n\n  // block until an action with the type \"LOAD_USERS\" was dispatched\n  yield take('LOAD_USERS')\n\n  // dispatch the redux action \"loadUsers('something')\"\n  // == { type: 'LOAD_USERS', payload: { search: 'something' } }\n  yield put(loadUsers('something'))\n\n  // block until either the action 'LOAD_USERS' or the action 'LOAD_POSTS' got dispatched\n  const winner = yield race({\n    loadUsers: take('LOAD_USERS'),\n    loadPosts: take('LOAD_POSTS'),\n  })\n\n  // in case the winner was loadUsers:\n  // winner == { loadUsers: /* something */, loadPosts: undefined }\n  console.log(winner)\n\n  // anything that returns a promise (.then(result => {})) can also be accessed like this:\n  const result = yield api.loadUsers()\n\n  // start another saga in the background (will not block)\n  yield fork(waitForUsersAction)\n\n  // start another saga in the foreground (will block until it finishes)\n  yield call(otherWorker)\n}\n\nfunction * otherWorker () {\n  console.log('inside otherworker')\n}\n\nfunction * waitForUsersAction () {\n  while (true) {\n    yield take('LOAD_USERS')\n    const result = yield api.loadUsers()\n    yield put({ type: 'USERS_LOADED', payload: { result } })\n  }\n}\n";
},801:function(n,e){n.exports="import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { kea } from 'kea'\n\nimport images from './images'     // array of objects [{ src, author }, ...]\nimport range from '~/utils/range' // helper, range(3) === [0, 1, 2]\n\n@kea({\n  actions: () => ({\n    updateSlide: index => ({ index })\n  }),\n\n  reducers: ({ actions }) => ({\n    currentSlide: [0, PropTypes.number, {\n      [actions.updateSlide]: (state, payload) => payload.index % images.length\n    }]\n  }),\n\n  selectors: ({ selectors }) => ({\n    currentImage: [\n      () => [selectors.currentSlide],\n      (currentSlide) => images[currentSlide],\n      PropTypes.object\n    ]\n  })\n})\nexport default class Slider extends Component {\n  render () {\n    const { currentSlide, currentImage } = this.props\n    const { updateSlide } = this.actions\n\n    const title = `Image copyright by ${currentImage.author}`\n\n    return (\n      <div className='kea-slider'>\n        <img src={currentImage.src} alt={title} title={title} />\n        <div className='buttons'>\n          {range(images.length).map(i => (\n            <span key={i}\n                  className={i === currentSlide ? 'selected' : ''}\n                  onClick={() => updateSlide(i)} />\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n"},918:function(n,e,t){var o=t(515);"string"==typeof o&&(o=[[n.i,o,""]]);t(22)(o,{});o.locals&&(n.exports=o.locals)},919:function(n,e,t){var o=t(516);"string"==typeof o&&(o=[[n.i,o,""]]);t(22)(o,{});o.locals&&(n.exports=o.locals)},920:function(n,e,t){var o=t(517);"string"==typeof o&&(o=[[n.i,o,""]]);t(22)(o,{});o.locals&&(n.exports=o.locals)},922:function(n,e,t){var o=t(519);"string"==typeof o&&(o=[[n.i,o,""]]);t(22)(o,{});o.locals&&(n.exports=o.locals)},923:function(n,e,t){var o=t(521);"string"==typeof o&&(o=[[n.i,o,""]]);t(22)(o,{});o.locals&&(n.exports=o.locals)},938:function(n,e,t){t(181),t(179),t(178),t(182),t(180),n.exports=t(177)}},[938]);