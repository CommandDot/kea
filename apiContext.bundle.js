webpackJsonp([12],{504:function(e,n,t){"use strict";function a(){return r.a.createElement("div",{className:"api-scene"},r.a.createElement("h2",null,"Context"),r.a.createElement("p",null,"Kea stores all of its runtime data on a context. This context must be reset before you can use your app."),r.a.createElement("h3",null,"resetContext"),r.a.createElement("p",null,"Call ",r.a.createElement("code",null,"resetContext")," before you render your app and connect all the different plugins to it."),r.a.createElement("p",null,"Here are all the options you can pass to it:"),r.a.createElement(s.default,{className:"javascript"},l.reset),r.a.createElement("h3",null,"getContext"),r.a.createElement("p",null,"Call ",r.a.createElement("code",null,"getContext()")," from anywhere to peek into the context"),r.a.createElement(s.default,{className:"javascript"},l.get))}Object.defineProperty(n,"__esModule",{value:!0}),n.default=a;var o=t(10),r=t.n(o),s=t(200),l=(t(133),{reset:t(632),get:t(633)})},632:function(e,n){e.exports="// store.js\nimport { resetContext } from 'kea'\n\nexport default resetContext({\n  // Plugins\n  plugins: [\n    sagaPlugin,\n    listenersPlugin,\n    routerPlugin\n  ]\n\n  // Create a redux store when resetting the context (no options).\n  createStore: true,\n\n  // Create a redux store when resetting the context (with options).\n  createStore: { // otherwise pass the following\n    // what root paths are available for kea\n    paths: ['kea', 'scenes'],\n\n    // additional reducers that your app uses\n    reducers: {},\n\n    // preloaded state for redux, used only with all non-kea reducers\n    preloadedState: undefined,\n\n    // middleware that gets passed to applyMiddleware(...middleware)\n    middleware: [],\n\n    // the compose function, defaults to the one from redux-devtools-extension or compose from redux\n    compose: composeWithDevTools || compose,\n\n    // gets passed to compose(middleware, ...enhancers)(createStore)\n    enhancers: []\n  },\n\n  // global defaults for specific logic\n  defaults: {\n    scenes: {\n      some: {\n        logic: { key: 'value' }\n      }\n    }\n  },\n\n  // make a lot of noise\n  debug: false,\n\n  // automatically build and mount logic when kea({}) is called. useful for legacy apps\n  autoMount: false,\n\n  // after calling const builtLogic = logic.build(); builtLogic.mount(),\n  // make fields like builtLogic.actions available on logic\n  proxyFields: true,\n\n  // if true, the defaults option takes keys like defaults:\n  // --\x3e { 'scenes.some.logic': { key: 'value' } }\n  // if false, the defaults option takes keys like defaults:\n  // --\x3e { scenes: { some: { logic: { key: 'value' } } } }\n  flatDefaults: false,\n\n  // how to regenerate the store when attaching a reducer to redux\n  // - dispatch = dispatch a ATTACH_REDUCER action\n  // - replace = silently replace the root reducer\n  attachStrategy: 'dispatch',\n\n  // how to regenerate the store when detaching a reducer to redux\n  // - dispatch = dispatch a DETACH_REDUCER action\n  // - replace = silently replace the root reducer\n  // - persist = never remove reducers from redux\n  detachStrategy: 'dispatch'\n})\n"},633:function(e,n){e.exports="import { getContext } from 'kea'\n\ngetContext() == {\n  plugins: {\n    activated: [],\n    buildOrder: [],\n    buildSteps: {},\n    events: {},\n    logicFields: {},\n    contexts: {}\n  },\n\n  input: {\n    inlinePathCreators: new Map(),\n    inlinePathCounter: 0,\n    defaults: undefined\n  },\n\n  build: {\n    cache: {}\n  },\n\n  mount: {\n    counter: {},\n    mounted: {}\n  },\n\n  reducers: {\n    tree: {},\n    roots: {},\n    combined: undefined\n  },\n\n  store: undefined, // you can get a copy of redux's store from here\n\n  options: {\n    debug: false,\n    autoMount: false,\n    proxyFields: true,\n    flatDefaults: false,\n    attachStrategy: 'dispatch',\n    detachStrategy: 'dispatch',\n\n    ...otherOptions\n  }\n}\n"}});