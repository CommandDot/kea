webpackJsonp([13],{701:function(e,t,n){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),n.d(t,"default",function(){return m});var c=n(6),s=n.n(c),i=n(282),p=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l={reset:n(903),store:n(904),logic:n(905),component:n(906)},m=function(e){function t(){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return r(t,e),p(t,[{key:"render",value:function(){return s.a.createElement("div",{className:"api-scene"},s.a.createElement("h2",null,"Testing logic stores"),s.a.createElement("p",null,s.a.createElement("strong",null,"NOTE!")," This section of the guide is still ",s.a.createElement("strong",null,"heavily")," under construction! Please check back in a few days."),s.a.createElement("h3",null,"Generic test setup"),s.a.createElement("p",null,"For testing kea we recommend using ",s.a.createElement("a",{href:"https://facebook.github.io/jest/"},"jest"),"."),s.a.createElement("h3",null,"Resetting the cache before each test"),s.a.createElement(i.default,{className:"javascript"},l.reset),s.a.createElement("h3",null,"Creating a store for your tests"),s.a.createElement(i.default,{className:"javascript"},l.store),s.a.createElement("h2",null,"Testing logic"),s.a.createElement(i.default,{className:"javascript"},l.logic),s.a.createElement("h3",null,"Testing components with enzyme"),s.a.createElement(i.default,{className:"javascript"},l.component),s.a.createElement("h3",null,"Other resources"),s.a.createElement("p",null,"Check out the source documentation on testing ",s.a.createElement("a",{href:"http://redux.js.org/docs/recipes/WritingTests.html"},"redux"),", ",s.a.createElement("a",{href:"https://github.com/reactjs/reselect#q-how-do-i-test-a-selector"},"selectors")," and ",s.a.createElement("a",{href:"https://redux-saga.js.org/docs/advanced/Testing.html"},"sagas"),"."))}}]),t}(c.Component)},903:function(e,t){e.exports="// logic.test.js\nimport { resetKeaCache } from 'kea'\n\nbeforeEach(() => {\n  resetKeaCache()\n})\n\ntest('starts from a clear state', () => {\n  // ...\n})\n"},904:function(e,t){e.exports="import { resetKeaCache, keaSaga, keaReducer } from 'kea'\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\nfunction getStore () {\n  resetKeaCache()\n\n  const reducers = combineReducers({\n    scenes: keaReducer('scenes')\n  })\n\n  const sagaMiddleware = createSagaMiddleware()\n  const finalCreateStore = compose(\n    applyMiddleware(sagaMiddleware)\n  )(createStore)\n\n  const store = finalCreateStore(reducers)\n\n  sagaMiddleware.run(keaSaga)\n\n  return store\n}\n\ntest('do something with the store', () => {\n  const store = getStore()\n\n  // ...\n})\n"},905:function(e,t){e.exports="/* global expect, test */\nimport { keaReducer } from 'kea'\nimport PropTypes from 'prop-types'\n\nimport getStore from './helpers/get-store'\n\ntest('homepage logic has all the right properties', () => {\n  const store = getStore()\n\n  // we must require because importing makes\n  const logic = require('./logic').default\n\n  expect(logic.path).toEqual(['scenes', 'homepage', 'index'])\n\n  // actions\n  expect(Object.keys(logic.actions)).toEqual(['updateName'])\n\n  const { updateName } = logic.actions\n\n  expect(typeof updateName).toBe('function')\n  expect(updateName.toString()).toBe('update name (homepage.index)')\n  expect(updateName('newname')).toEqual({ payload: { name: 'newname' }, type: updateName.toString() })\n\n  // reducers\n  const defaultValues = { name: 'Chirpy' }\n  const state = { scenes: { homepage: { index: defaultValues } } }\n  expect(Object.keys(logic.reducers).sort()).toEqual(['capitalizedName', 'name'])\n\n  expect(logic.reducers).toHaveProperty('name.reducer')\n  expect(logic.reducers).toHaveProperty('name.type', PropTypes.string)\n  expect(logic.reducers).toHaveProperty('name.value', 'Chirpy')\n\n  const nameReducer = logic.reducers.name.reducer\n  expect(Object.keys(nameReducer)).toEqual([ updateName.toString() ])\n  expect(nameReducer[updateName.toString()]).toBeDefined()\n  expect(nameReducer[updateName.toString()]('', { name: 'newName' })).toBe('newName')\n\n  expect(logic.reducers).not.toHaveProperty('capitalizedName.reducer')\n  expect(logic.reducers).toHaveProperty('capitalizedName.type', PropTypes.string)\n  expect(logic.reducers).not.toHaveProperty('capitalizedName.value', 'chirpy')\n\n  // big reducer\n  expect(typeof logic.reducer).toBe('function')\n  expect(logic.reducer({}, { type: 'random action' })).toEqual(defaultValues)\n  expect(logic.reducer({ name: 'something' }, { type: 'random action' })).toEqual({ name: 'something' })\n  expect(logic.reducer({ name: 'something' }, updateName('newName'))).toEqual({ name: 'newName' })\n\n  // selectors\n  expect(Object.keys(logic.selectors).sort()).toEqual(['capitalizedName', 'name', 'root'])\n  expect(logic.selectors.name(state)).toEqual('Chirpy')\n  expect(logic.selectors.capitalizedName(state)).toEqual('Chirpy')\n\n  // root selector\n  expect(logic.selector(state)).toEqual(defaultValues)\n  expect(logic.selectors.root(state)).toEqual(defaultValues)\n})\n"},906:function(e,t){e.exports="/* global test, expect */\nimport './helper/jsdom'\n\nimport React, { Component } from 'react'\nimport { kea } from 'kea'\nimport PropTypes from 'prop-types'\nimport { mount } from 'enzyme'\nimport { Provider } from 'react-redux'\n\nimport getStore from './helper/get-store'\n\nclass SampleComponent extends Component {\n  render () {\n    const { id, name, capitalizedName } = this.props\n    const { updateName } = this.actions\n\n    return (\n      <div>\n        <div className='id'>{id}</div>\n        <div className='name'>{name}</div>\n        <div className='capitalizedName'>{capitalizedName}</div>\n        <div className='updateName' onClick={updateName}>updateName</div>\n      </div>\n    )\n  }\n}\n\ntest('connects to react components', () => {\n  const store = getStore()\n\n  const dynamicLogic = kea({\n    key: (props) => props.id,\n    path: (key) => ['scenes', 'something', key],\n    actions: ({ constants }) => ({\n      updateName: name => ({ name })\n    }),\n    reducers: ({ actions, constants }) => ({\n      name: ['chirpy', PropTypes.string, {\n        [actions.updateName]: (state, payload) => payload.name + payload.key\n      }]\n    }),\n    selectors: ({ constants, selectors }) => ({\n      capitalizedName: [\n        () => [selectors.name],\n        (name) => {\n          return name.trim().split(' ').map(k => `${k.charAt(0).toUpperCase()}${k.slice(1).toLowerCase()}`).join(' ')\n        },\n        PropTypes.string\n      ]\n    })\n  })\n\n  const ConnectedComponent = dynamicLogic(SampleComponent)\n\n  const wrapper = mount(\n    <Provider store={store}>\n      <ConnectedComponent id={12} />\n    </Provider>\n  )\n\n  expect(wrapper.find('.id').text()).toEqual('12')\n  expect(wrapper.find('.name').text()).toEqual('chirpy')\n  expect(wrapper.find('.capitalizedName').text()).toEqual('Chirpy')\n\n  // for now we must dispatch a discard action to regenerate the store\n  store.dispatch({ type: 'discard' })\n  expect(store.getState()).toEqual({ scenes: { something: { 12: { name: 'chirpy' } } } })\n\n  const sampleComponent = wrapper.find('SampleComponent').node\n\n  expect(sampleComponent.actions).toBeDefined()\n  expect(Object.keys(sampleComponent.actions)).toEqual(['updateName'])\n\n  const { updateName } = sampleComponent.actions\n  updateName('somename')\n\n  expect(store.getState()).toEqual({ scenes: { something: { 12: { name: 'somename12' } } } })\n\n  wrapper.render()\n\n  expect(wrapper.find('.id').text()).toEqual('12')\n  expect(wrapper.find('.name').text()).toEqual('somename12')\n  expect(wrapper.find('.capitalizedName').text()).toEqual('Somename12')\n})\n"}});