webpackJsonp([10],{501:function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),n.d(t,"default",function(){return h});var i=n(10),a=n.n(i),l=n(133),u=n(200),c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),p={example:n(627),start:n(628),actions:n(629)},h=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return s(t,e),c(t,[{key:"render",value:function(){return a.a.createElement("div",{className:"plugins-scene"},a.a.createElement("div",{className:"description"},a.a.createElement("p",null,a.a.createElement("strong",null,"NB!")," See the ",a.a.createElement(l.a,{to:"/api/plugins"},"plugins API page")," for a list of everything that plugins can do."),a.a.createElement("h2",null,"Requests plugin"),a.a.createElement("p",null,'In this guide we will write a simple plugin called "requests" that takes as input an action and creates 3 actions for different states of this action. Something like this:'),a.a.createElement(u.default,{className:"javascript"},p.example),a.a.createElement("p",null,"The first step in authoring a plugin is to create a blank plugin and add it to the plugins array in ",a.a.createElement("code",null,"resetContext"),"."),a.a.createElement("p",null,"Here's a sample skeleton structure for a plugin, extracted from the code on the ",a.a.createElement(l.a,{to:"/api/plugins"},"plugins API page"),". See that page for all that you can do with plugins."),a.a.createElement(u.default,{className:"javascript"},p.start),a.a.createElement("p",null,"This time we're only interested in the ",a.a.createElement("code",null,"afterLogic"),' event. We will take the input from our "requests" object and extend the logic with the actions that we generate from it.'),a.a.createElement(u.default,{className:"javascript"},p.actions),a.a.createElement("p",null,a.a.createElement("strong",null,"TODO")," This documentation is still a work in progress... but I hope you can imagine what happens next :)")))}}]),t}(i.Component)},627:function(e,t){e.exports="// this input:\nkea({\n  requests: () => ({\n    fetchArticle: (id) => api.fetchArticle(id)\n    fetchComments: (id) => api.fetchComments(id),\n    postComment: (id, comment) => api.postComment(id, comment)\n  })\n})\n\n// will be converted to this output:\nkea({\n  actions: () => ({\n    fetchArticle: (id) => ({ id }),\n    fetchArticleSuccess: (request, response) => ({ request, response }),\n    fetchArticleFailure: (error) => ({ error })\n\n    fetchComments: (id) => ({ id }),\n    fetchCommentsSuccess: (request, response) => ({ request, response }),\n    fetchCommentsFailure: (error) => ({ error })\n\n    postComment: (id, comment) => ({ id, comment }),\n    postCommentSuccess: (request, response) => ({ request, response }),\n    postCommentFailure: (error) => ({ error })\n  })\n})\n"},628:function(e,t){e.exports="const requestsPlugin = (/* { options } */) => ({\n  // Required: name of the plugin\n  name: 'requests'\n\n  // default values for output in logic,\n  // also used to register keys that the plugin exports on the logic\n  defaults: () => ({\n  }),\n\n  // when are the build steps run\n  // (skip this and they are appended to the end)\n  buildOrder: {\n  },\n\n  // steps that are performed when building the logic\n  buildSteps: {\n  }\n\n  // various other events that the plugin can hook into\n  events: {\n  }\n})\n\n\n// later:\nresetContext({\n  createStore: true,\n  plugins: [ requestsPlugin ]\n})\n"},629:function(e,t){e.exports="const requestsPlugin = (/* { options } */) => ({\n  name: 'requests'\n\n  events: {\n    afterLogic (logic, input) {\n      // skip if there are no requests in the input\n      if (!input.requests) {\n        return\n      }\n\n      // run the requests function with the already created logic as an input,\n      // so it can do ({ actions, ... }) => ({ ... })\n      const requests = input.requests(logic)\n\n      // TODO: convert requests into newActions\n      let newActions = {}\n\n      // extend the logic with these actions\n      logic.extend({\n        actions: () => newActions\n      })\n    }\n  }\n})\n"}});