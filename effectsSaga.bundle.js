webpackJsonp([6],{562:function(e,n,t){"use strict";function a(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function o(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}function r(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),t.d(n,"default",function(){return d});var c=t(6),l=t.n(c),s=t(217),i=t(132),u=function(){function e(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(n,t,a){return t&&e(n.prototype,t),a&&e(n,a),n}}(),m={install:t(803),import:t(804),store:t(805),usage:t(806),keaSagas:t(807),keaStart:t(808),keaStop:t(809),keaTakeEvery:t(810),keaTakeLatest:t(811),keaWorkers:t(812)},d=function(e){function n(){return a(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return r(n,e),u(n,[{key:"render",value:function(){return l.a.createElement("div",null,l.a.createElement("div",{className:"description"},l.a.createElement("h2",null,"Sagas"),l.a.createElement("p",null,"Kea has first class support for sagas via the ",l.a.createElement("a",{href:"https://github.com/keajs/kea-saga"},l.a.createElement("code",null,"kea-saga"))," plugin."),l.a.createElement("p",null,"Read more about Sagas on the ",l.a.createElement("a",{href:"https://redux-saga.js.org/"},"redux-saga")," homepage."),l.a.createElement("p",null,'Also read the sections of the guide marked "with kea-saga" to learn more.')),l.a.createElement("div",{className:"description"},l.a.createElement("h2",null,"Installation"),l.a.createElement("p",null,"First install the ",l.a.createElement("a",{href:"https://github.com/keajs/kea-saga"},l.a.createElement("code",null,"kea-saga"))," and ",l.a.createElement("a",{href:"https://github.com/redux-saga/redux-saga"},l.a.createElement("code",null,"redux-saga"))," packages:"),l.a.createElement(s.default,{className:"bash"},m.install),l.a.createElement("p",null,"Then import ",l.a.createElement("code",null,"sagaPlugin")," from ",l.a.createElement("code",null,"kea-saga")," in your ",l.a.createElement("code",null,"store.js")," and add it to the plugins array in ",l.a.createElement("code",null,"getStore()")),l.a.createElement(s.default,{className:"javascript"},m.import),l.a.createElement("p",null,"If you have configured your store through ",l.a.createElement(i.a,{to:"/api/store"},l.a.createElement("code",null,"getStore()")),", you're all set!"),l.a.createElement("p",null,"If, however, you wish to configure your store manually, connect the saga middleware like so:"),l.a.createElement(s.default,{className:"javascript"},m.store)),l.a.createElement("div",{className:"description"},l.a.createElement("h2",null,"Usage"),l.a.createElement("p",null,"First, read the docs on the ",l.a.createElement("a",{href:"https://redux-saga.js.org/"},"redux-saga")," homepage to learn how sagas work."),l.a.createElement("p",null,"Adding ",l.a.createElement("code",null,"kea-saga")," will give your logic stores will get access to the keys: ",l.a.createElement("code",null,"start"),", ",l.a.createElement("code",null,"stop"),", ",l.a.createElement("code",null,"takeEvery"),", ",l.a.createElement("code",null,"takeLatest"),", ",l.a.createElement("code",null,"workers"),", ",l.a.createElement("code",null,"sagas"),"."),l.a.createElement(s.default,{className:"javascript"},m.usage),l.a.createElement("h4",null,"start: ",l.a.createElement("code",null,"function * () ","{}")),l.a.createElement("p",null,"Saga that is started whenever the component is connected or the saga exported from this component starts"),l.a.createElement("p",null,"Note: sagas are started before your ",l.a.createElement("u",null,"wrapped component's")," ",l.a.createElement("code",null,"componentDidMount"),". Actions dispatched before this lifecycle method will not be seen inside ",l.a.createElement("code",null,"start"),"."),l.a.createElement(s.default,{className:"javascript"},m.keaStart),l.a.createElement("h4",null,"stop: ",l.a.createElement("code",null,"function * () ","{}")),l.a.createElement("p",null,"Saga that is started whenever the component is disconnected or the saga exported from this component is cancelled"),l.a.createElement("p",null,"This function is called right before your ",l.a.createElement("u",null,"wrapped component's")," ",l.a.createElement("code",null,"componentWillUnmount")," lifecycle method."),l.a.createElement(s.default,{className:"javascript"},m.keaStop),l.a.createElement("h4",null,"takeEvery: ",l.a.createElement("code",null,"({ actions }) => ({})")),l.a.createElement("p",null,"Run the following workers every time the action is dispatched"),l.a.createElement("p",null,"Note: sagas are started before your wrapped component's ",l.a.createElement("code",null,"componentDidMount"),". Actions dispatched before this lifecycle method will not be seen by ",l.a.createElement("code",null,"takeEvery"),"."),l.a.createElement(s.default,{className:"javascript"},m.keaTakeEvery),l.a.createElement("h4",null,"takeLatest: ",l.a.createElement("code",null,"({ actions }) => ({})")),l.a.createElement("p",null,"Run the following workers every time the action is dispatched, cancel the previous worker if still running"),l.a.createElement("p",null,"Note: sagas are started before your wrapped component's ",l.a.createElement("code",null,"componentDidMount"),". Actions dispatched before this lifecycle method will not be seen by ",l.a.createElement("code",null,"takeLatest"),"."),l.a.createElement(s.default,{className:"javascript"},m.keaTakeLatest),l.a.createElement("h4",null,"workers: ",l.a.createElement("code",null,"{}")),l.a.createElement("p",null,"An object of workers which you may reference in other sagas."),l.a.createElement(s.default,{className:"javascript"},m.keaWorkers),l.a.createElement("h4",null,"sagas: ",l.a.createElement("code",null,"[]")),l.a.createElement("p",null,"Array of sagas that get exported with this component's saga"),l.a.createElement(s.default,{className:"javascript"},m.keaSagas)))}}]),n}(c.Component)},803:function(e,n){e.exports="yarn add kea-saga redux-saga\nnpm install --save kea-saga redux-saga\n"},804:function(e,n){e.exports="import sagaPlugin from 'kea-saga'\n\nconst store = getStore({\n  plugins: [\n    sagaPlugin\n  ]\n})\n"},805:function(e,n){e.exports="import { keaReducer, activatePlugin } from 'kea'\nimport sagaPlugin, { keaSaga } from 'kea-saga'\n\nexport default function getStore () {\n  activatePlugin(sagaPlugin)\n\n  const reducers = combineReducers({\n    kea: keaReducer('kea'),\n    scenes: keaReducer('scenes')\n  })\n\n  const sagaMiddleware = createSagaMiddleware()\n  const finalCreateStore = compose(\n    applyMiddleware(sagaMiddleware)\n  )(createStore)\n\n  const store = finalCreateStore(reducers)\n\n  sagaMiddleware.run(keaSaga)\n\n  return store\n}\n"},806:function(e,n){e.exports="import { kea } from 'kea'\n\nexport default kea({\n  // ... see the api docs for more\n\n  start: function * () {\n    // saga started or component mounted\n    console.log(this)\n  },\n\n  stop: function * () {\n    // saga cancelled or component unmounted\n  },\n\n  takeEvery: ({ actions, workers }) => ({\n    [actions.simpleAction]: function * () {\n      // inline worker\n    },\n    [actions.actionWithDynamicPayload]: workers.dynamicWorker\n  }),\n\n  takeLatest: ({ actions, workers }) => ({\n    [actions.actionWithStaticPayload]: function * () {\n      // inline worker\n    },\n    [actions.actionWithManyParameters]: workers.dynamicWorker\n  }),\n\n  workers: {\n    * dynamicWorker (action) {\n      const { id, message } = action.payload // if from takeEvery/takeLatest\n      // reference with workers.dynamicWorker\n    },\n    longerWayToDefine: function * () {\n      // another way to define a worker\n    }\n  },\n\n  sagas: [saga1, saga2]\n})\n"},807:function(e,n){e.exports="// Input\nsagas: [saga1, saga2]\n\n// Output\nmyRandomSceneLogic.saga == function * () {\n  yield fork(saga1)\n  yield fork(saga2)\n\n  // start() ...\n}\n"},808:function(e,n){e.exports="// Input\nstart: function * () {\n  // saga started or component mounted\n  console.log(this)\n}\n\n// Output\nmyRandomSceneLogic.saga == function * () {\n  // saga started or component mounted\n  console.log(this)\n  // => { actions, workers, path, key, get: function * (), fetch: function * () }\n}\n"},809:function(e,n){e.exports="// Input\nstop: function * () {\n  // saga cancelled or component unmounted\n}\n\n// Output\nmyRandomSceneLogic.saga == function * () {\n  try {\n    // start()\n  } finally {\n    if (cancelled()) {\n      // saga cancelled or component unmounted\n    }\n  }\n}\n"},810:function(e,n){e.exports="// Input\ntakeEvery: ({ actions, workers }) => ({\n  [actions.simpleAction]: function * () {\n    // inline worker\n  },\n  [actions.actionWithDynamicPayload]: workers.dynamicWorker\n})\n\n// Output\nmyRandomSceneLogic.saga == function * () {\n  // pseudocode\n  yield fork(function * () {\n    yield [\n      takeEvery(actions.simpleAction.toString(), function * () {\n        // inline worker\n      }.bind(this)),\n      takeEvery(actions.actionWithDynamicPayload.toString(), workers.dynamicWorker.bind(this))\n    ]\n  })\n}\n"},811:function(e,n){e.exports="// Input\ntakeLatest: ({ actions, workers }) => ({\n  [actions.simpleAction]: function * () {\n    // inline worker\n  },\n  [actions.actionWithDynamicPayload]: workers.dynamicWorker\n})\n\n// Output\nmyRandomSceneLogic.saga == function * () {\n  // pseudocode\n  yield fork(function * () {\n    yield [\n      takeLatest(actions.simpleAction.toString(), function * () {\n        // inline worker\n      }.bind(this)),\n      takeLatest(actions.actionWithDynamicPayload.toString(), workers.dynamicWorker.bind(this))\n    ]\n  })\n}\n"},812:function(e,n){e.exports="// Input\nworkers: {\n  * dynamicWorker (action) {\n    const { id, message } = action.payload // if from takeEvery/takeLatest\n    // reference with workers.dynamicWorker\n  },\n  longerWayToDefine: function * () {\n    // another worker\n  }\n}\n\n// Output\nmyRandomSceneLogic.workers == {\n  dynamicWorker: function (action) *\n    const { id, message } = action.payload // if from takeEvery/takeLatest\n    // reference with workers.dynamicWorker\n  }.bind(myRandomSceneLogic),\n\n  longerWayToDefine: function () * {\n    // another worker\n  }.bind(myRandomSceneLogic)\n}\n"}});