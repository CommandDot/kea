webpackJsonp([8],{1e3:function(e,t){e.exports="import React, { Component } from 'react'\nimport { kea } from 'kea'\n\nimport otherLogic from './other-logic'\n\n@kea({\n  key: (props) => props.id,\n  path: (key) => ['scenes', 'something', key],\n\n  actions: () => ({\n    someAction: (id) => ({ id })\n  }),\n\n  reducers: ({ actions }) => ({\n    myValue: [0, PropTypes.number, {\n      [actions.someAction]: (state, payload): payload.id\n    }]\n  }),\n\n  selectors: ({ selectors }) => ({\n    combinedValue: [\n      () => [\n        selectors.myValue,\n        otherLogic.selectors.otherValue,\n        (state, props) => props.id\n      ],\n      (myValue, otherValue, id) => myValue + otherValue + id,\n      PropTypes.number\n    ]\n  })\n\n  // other options, see the api docs for kea(options):\n  // - connect, constants, start, stop, takeEvery, takeLatest, workers, sagas\n})\nexport default class MyComponent extends Component {\n  render () {\n    const { myValue, combinedValue } = this.props\n    const { someAction } = this.actions\n\n    return (\n      <div>\n        <div>Combined props and reducer in a selector: {combinedValue}</div>\n        <button onClick={() => someAction(12)}>{myValue}</button>\n      </div>\n    )\n  }\n}\n"},1001:function(e,t){e.exports="import React, { Component } from 'react'\nimport { kea } from 'kea'\n\n// with decorators\n@kea({ /* options */ })\nexport default class MyComponent extends Component {\n  // ...\n}\n\n// without decorators\nclass MyComponent extends Component {\n  // ...\n}\nexport default kea({ /* options */ })(MyComponent)\n"},1002:function(e,t){e.exports="export default kea({\n  actions: () => ({\n    action1: true,\n    action2: false\n  }),\n  reducers: () => ({\n    prop1: [...],\n    prop2: [...]\n  }),\n  connect: {\n    actions: [\n      otherLogic, [\n        'importedAction1'\n      ]\n    ],\n    props: [\n      otherLogic, [\n        'importedProp1'\n      ]\n    ]\n  },\n  // ... other kea options\n})(({\n  prop1, prop2, importedProp1,\n  // actions are always also passed in a prop called 'actions'\n  actions: { action1, action2, importedAction1 }\n}) => (\n  <div>\n    <button onClick={action1}>{prop1}</button>\n  </div>\n))\n"},1003:function(e,t){e.exports="path: (key) => ['scenes', 'homepage', 'sliders', key]\n"},1004:function(e,t){e.exports="key: (props) => props.id\n"},1005:function(e,t){e.exports="selectors: ({ selectors }) => ({\n  combinedValue: [\n    () => [\n      // standard selector for myValue\n      selectors.myValue,\n\n      // use a selector from a different logic store without conencting the prop\n      otherLogic.selectors.otherValue,\n\n      // props are passed as the second argument to input selectors\n      (state, props) => props.id\n    ],\n    (myValue, otherValue, id) => myValue + otherValue + id,\n    PropTypes.number\n  ]\n})\n"},888:function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),n.d(t,"default",function(){return d});var s=n(9),c=n.n(s),l=n(194),i=n(295),p=n.n(i),u=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),m={usage:n(1e3),decorators:n(1001),stateless:n(1002),path:n(1003),key:n(1004),selectors:n(1005)},d=function(e){function t(){return o(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return r(t,e),u(t,[{key:"render",value:function(){return c.a.createElement("div",{className:"api-scene"},c.a.createElement("h2",null,c.a.createElement("code",null,"kea(options)(Component)")),c.a.createElement("p",null,"Wrap a kea logic store around a React component."),c.a.createElement("p",null,"The React component will receive all of the logic store's selectors in ",c.a.createElement("code",null,"this.props")," and all actions under ",c.a.createElement("code",null,"this.actions"),"."),c.a.createElement(p.a,{className:"javascript"},m.usage),c.a.createElement("p",null,"It's up to you if you wish to use decorators or not:"),c.a.createElement(p.a,{className:"javascript"},m.decorators),c.a.createElement("p",null,"See the ",c.a.createElement(l.a,{to:"/guide/installation"},"installation guide")," for details."),c.a.createElement("h3",null,"Stateless functional components"),c.a.createElement("p",null,"You may also use kea with stateless functional components. The syntax can get quite ",c.a.createElement("em",null,"lispy")," with all the brackets, but it works:"),c.a.createElement(p.a,{className:"javascript"},m.stateless),c.a.createElement("h3",null,"Options"),c.a.createElement("p",null,"Wrapped logic stores accept all theÂ same options as regular logic stores. See the documentation for ",c.a.createElement("code",null,c.a.createElement(l.a,{to:"/api/logic"},"kea(options)"))," for more details."),c.a.createElement("p",null,"These options are different:"),c.a.createElement("h4",null,"key: ",c.a.createElement("code",null,"(props) => 'key'")),c.a.createElement("p",null,"If you wish, you may define a ",c.a.createElement("code",null,"key")," that distinguishes instances of the component"),c.a.createElement(p.a,{className:"javascript"},m.key),c.a.createElement("h4",null,"path: ",c.a.createElement("code",null,"(key) => []")),c.a.createElement("p",null,"The path takes the key as an argument if you wish to define the location in redux for the component instance"),c.a.createElement(p.a,{className:"javascript"},m.path),c.a.createElement("h4",null,"selectors: ",c.a.createElement("code",null,"({ path, constants, actions, selectors }) => ({})")),c.a.createElement("p",null,"The ",c.a.createElement("code",null,"selectors")," have an additional feature with wrapped logic stores. You can access the ",c.a.createElement("code",null,"props")," passed to your component like so:"),c.a.createElement(p.a,{className:"javascript"},m.selectors))}}]),t}(s.Component)}});