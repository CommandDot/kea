webpackJsonp([14],{507:function(e,n,t){"use strict";function o(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function r(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}function i(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),t.d(n,"default",function(){return f});var a=t(10),u=t.n(a),c=(t(133),t(200)),s=function(){function e(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(n,t,o){return t&&e(n.prototype,t),o&&e(n,o),n}}(),l={everything:t(640)},f=function(e){function n(){return o(this,n),r(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return i(n,e),s(n,[{key:"render",value:function(){return u.a.createElement("div",{className:"plugins-scene"},u.a.createElement("div",{className:"description"},u.a.createElement("h2",null,"Writing Plugins"),u.a.createElement("p",null,"Kea has a powerful system for authoring plugins. When you find yourself writing repetitive code, it might be time to extract it into a plugin."),u.a.createElement("h2",null,"Everything a plugin can contain"),u.a.createElement("p",null,"Here are all the options you can use within a plugin:"),u.a.createElement(c.default,{className:"javascript"},l.everything)))}}]),n}(a.Component)},640:function(e,n){e.exports="const myPlugin = () => ({\n  // Required: name of the plugin\n  name: ''\n\n  // default values for output in logic stores, also used to register keys that logic will contain\n  defaults: () => ({\n    key: {}\n  }),\n\n  // when are the build steps run (skip this and they are appended to the end)\n  buildOrder: {\n    listeners: { before: 'events' },\n    thunks: { after: 'actionCreators' }\n  },\n\n  // either add new steps or add after effects for existing steps\n  buildSteps: {\n    // steps from core that you can extend\n    connect (logic, input)\n    constants (logic, input)\n    actions (logic, input)\n    defaults (logic, input)\n    reducers (logic, input)\n    reducer (logic, input)\n    reducerSelectors (logic, input)\n    selectors (logic, input)\n    // or add your own steps with custom names here and other plugins can then extend them\n  }\n\n  events: {\n    // Run after creating a new context, before plugins are activated and the store is created\n    afterOpenContext (context, options)\n    // Run after this plugin has been activated\n    afterPlugin ()\n    // Run before the redux store creation begins. Use it to add options (middleware, etc) to the store creator.\n    beforeReduxStore (options)\n    // Run after the redux store is created.\n    afterReduxStore (options, store)\n    // Run before we start doing anything\n    beforeKea (input)\n    // before the steps to build the logic (gets an array of inputs from kea(input).extend(input))\n    beforeBuild (logic, inputs)\n    // before the steps to convert input into logic (also run once per .extend())\n    beforeLogic (logic, input)\n    // after the steps to convert input into logic (also run once per .extend())\n    afterLogic (logic, input)\n    // after the steps to build the logic\n    afterBuild (logic, inputs)\n    // Run before/after a logic store is mounted in React\n    beforeMount (logic)\n    afterMount (logic)\n    // Run before/after a reducer is attached to Redux\n    beforeAttach (logic)\n    afterAttach (logic)\n    // Run before/after a logic store is unmounted in React\n    beforeUnmount (logic)\n    afterUnmount (logic)\n    // Run before/after a reducer is detached frm Redux\n    beforeDetach (logic)\n    afterDetach (logic)\n    // when wrapping a React component\n    beforeWrapper (input, Klass)\n    afterWrapper (input, Klass, Kea)\n    // Run after mounting and before rendering the component in React's scope (you can use hooks here)\n    beforeRender (logic, props)\n    // Run when we are removing kea from the system, e.g. when cleaning up after tests\n    beforeCloseContext (context)\n  }\n})\n"}});